package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"github.com/emejotaw/users-api-bff/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	user, err := r.userService.Create(input)

	if err != nil {
		return nil, err
	}

	return &model.User{
		Name:       user.Name,
		Email:      user.Email,
		DocumentID: user.DocumentId,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.userService.FindAll()

	if err != nil {
		return nil, err
	}

	userList := []*model.User{}
	for _, user := range users {
		userList = append(userList, &model.User{
			ID:         user.ID,
			Name:       user.Name,
			Email:      user.Email,
			DocumentID: user.DocumentId,
		})
	}

	return userList, nil
}

// Address is the resolver for the Address field.
func (r *userResolver) Address(ctx context.Context, obj *model.User) (*model.Address, error) {

	address, err := r.addressService.FindByUserID(obj.ID)

	if err != nil {
		return nil, err
	}

	return &model.Address{
		ID:           address.ID,
		State:        address.State,
		City:         address.City,
		Neighborhood: address.Neighborhood,
		Street:       address.Street,
		Number:       address.Number,
		ZipCode:      address.ZipCode,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
